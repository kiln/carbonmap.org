#!/bin/bash

set -ex

export PYTHONIOENCODING=utf-8

cartograms_bin=/usr/local/cartograms/bin

simplification=50000
simplification_json='{"AU": 30000, "NZ": 30000}'
massive_simplification=15000
massive_simplification_json='{"AU": 10000, "NZ": 10000}'

all_datasets="Area Population GDP  Extraction Emissions Consumption Historical Reserves  PeopleAtRisk SeaLevel Poverty"

col_Area="Land area (sq. km)"
col_Population='Population, total, 2010'
col_GDP='GDP, PPP (current international $), 2010'

col_Extraction="CO2 from fossil fuels extracted, 2010"
col_Emissions="CO2 from fossil fuel use (million tonnes, 2010)"
col_Consumption="Consumption footprint, million tonnes CO2, 2010"
col_Historical="Cumulative CO2 emissions from energy, 1850â€“2007 (million tonnes)"
col_Reserves="Potential CO2 from proven reserves (MT)"

col_PeopleAtRisk="Number of people exposed to droughts, floods, extreme temps"
col_SeaLevel="Population below 5m"
col_Poverty='Population living below $1.25 a day'

format_SeaLevel=.0f

regenerate=false
paths=false
massive_paths=false
while [ $# -gt 0 ]
do
    case "$1" in
        --regenerate)
            regenerate=true
            paths=true # --regenerate implies --paths
            shift
            ;;
        --paths)
            paths=true
            shift
            ;;
        --massive-paths)
            massive_paths=true
            shift
            ;;
        --)
            shift
            break
            ;;
        --*)
            echo >&2 "$0: Unrecognised option $1"
            exit 64
            ;;
        *)
            break
            ;;
    esac
done


if $regenerate
then
    datasets="${1-${all_datasets}}"
    for f in $datasets
    do
        "$cartograms_bin"/delete-data.py "carbonmap:$f"
        eval col=\${col_$f}
        "$cartograms_bin"/load-data.py "carbonmap:$f" data/Maps/With\ alpha-2/$f.csv countries "Alpha-2" "$col"
        "$cartograms_bin"/density-grid.py --dataset "carbonmap:$f" --map world-robinson > data/Maps/Cartogram\ data/"$f".density && \
        cart 1500 750 data/Maps/Cartogram\ data/"$f".density data/Maps/Cartogram\ data/"$f".cart
    done
fi

if $paths
then
    "$cartograms_bin"/as-js.py --map world-robinson --output-grid=3660x1856 --data-var=carbonmap_data --simplification="$simplification" --simplification-json="$simplification_json" data/Maps/Cartogram\ data/*.cart > site/data.paths.js
fi

if $massive_paths
then
    "$cartograms_bin"/as-js.py --map world-robinson --output-grid=3660x1856 --data-var=carbonmap_data --simplification="$massive_simplification" --simplification-json="$massive_simplification_json" data/Maps/Cartogram\ data/*.cart > site/data.paths-massive.js
fi

# Generate a spreadsheet showing all the cartogram data
(
    echo -n "Alpha-2 ISO country code,Country name"
    for f in $all_datasets
    do
        echo -n ",$f"
        if head -1 "data/Maps/With alpha-2/$f.csv" | egrep -q ',Notes(,|$)'
        then
            echo -n ",($f notes)"
            eval has_notes_$f=true
        else
            eval has_notes_$f=false
        fi
    done
    echo
    
    echo -n ,
    for f in $all_datasets
    do
        eval col=\${col_$f}
        echo -n ",\"$col\""
        eval \${has_notes_$f} && echo -n ,
    done
    echo

    echo -n ,
    for f in $all_datasets
    do
        echo -n ',"'
        perl -pe 's/"/""/g' "data/Maps/$f.text.md"
        echo -n '"'
        eval \${has_notes_$f} && echo -n ,
    done
    echo

    # Generate a YAML configuration, and feed it to csv-join
    (
        echo "key: Alpha-2"
        echo "files:"
        echo "- file: /usr/local/cartograms/data/continents.csv"
        echo "  key: iso2"
        echo "  values: [name]"
        for f in $all_datasets
        do
            eval col=\${col_$f}
            eval has_notes=\${has_notes_$f}
            echo "- file: data/Maps/With alpha-2/$f.csv"
            echo "  values:"
            echo "  - $col"
            if $has_notes
            then
                echo "  - Notes"
            fi
        done
    ) | "$cartograms_bin"/csv-join
) > site/map-data.csv

cat site/data.paths.js > site/data.js
cat site/data.paths-massive.js > site/data-massive.js

(
    echo "// Text, values and ranks generated at $(date)"
    
    if [ ${PIPESTATUS[0]} -ne 0 ]
    then
        exit ${PIPESTATUS[0]}
    fi
    
    echo -n 'carbonmap_data._raw._text = "'
    markdown_py -o html5 -s escape -e utf-8 data/Maps/Reset.text.md | perl -l40pe ''
    echo '";'
    
    echo -n 'carbonmap_data._names = '
    "$cartograms_bin"/csv-to-json --key iso2 --value name /usr/local/cartograms/data/continents.csv
    echo ';'
    
    for f in $all_datasets
    do
        if [ -e data/Maps/With\ alpha-2/$f.csv ]
        then
            echo -n "carbonmap_data.$f._text = \""
            markdown_py -o html5 -s escape -e utf-8 data/Maps/"$f".text.md | perl -l40pe 's/"/\\"/g'
            echo '";'
            
            eval col=\${col_$f}
            eval type=\${type_$f:-float}
            eval format=\${format_$f:-.1f}
            echo -n "carbonmap_values.$f = "
            "$cartograms_bin"/csv-to-json --key Alpha-2 --value "$col" --type="$type" --format="{:,$format}" data/Maps/With\ alpha-2/$f.csv
            echo ';'
            
            echo -n "carbonmap_rank.$f = "
            "$cartograms_bin"/csv-to-json --rank --key Alpha-2 --value "$col" --type="$type" data/Maps/With\ alpha-2/$f.csv
            echo ';'
        fi
    done
) | tee -a site/data-massive.js >> site/data.js

cat site/data.shading.js | tee -a site/data-massive.js >> site/data.js
echo >> site/data.js "carbonmapDataLoaded();"
echo >> site/data-massive.js "carbonmapDataLoaded();"

bin/dump-project-data.py carbonmap > data/dumped.csv
